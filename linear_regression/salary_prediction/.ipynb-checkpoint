{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2ea9a710",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f44050a7",
   "metadata": {},
   "outputs": [],
   "source": [
    "ds_salary=pd.read_csv('Salary_dataset.csv');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e9f48222",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>YearsExperience</th>\n",
       "      <th>Salary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1.2</td>\n",
       "      <td>39344.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1.4</td>\n",
       "      <td>46206.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>1.6</td>\n",
       "      <td>37732.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2.1</td>\n",
       "      <td>43526.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2.3</td>\n",
       "      <td>39892.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0  YearsExperience   Salary\n",
       "0           0              1.2  39344.0\n",
       "1           1              1.4  46206.0\n",
       "2           2              1.6  37732.0\n",
       "3           3              2.1  43526.0\n",
       "4           4              2.3  39892.0"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ds_salary.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "b2fde951",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1.2000000000000002, 10.6)"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ds_salary.YearsExperience.min(),ds_salary.YearsExperience.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "dc2b7dd6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Unnamed: 0', 'YearsExperience', 'Salary'], dtype='object')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ds_salary.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "2704fc7b",
   "metadata": {},
   "outputs": [],
   "source": [
    "ds_salary=ds_salary.drop(['Unnamed: 0'],axis=1)\n",
    "x=ds_salary['YearsExperience']\n",
    "y=ds_salary['Salary']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "b64e3a6a",
   "metadata": {},
   "outputs": [],
   "source": [
    "x=x.to_numpy()\n",
    "y=y.to_numpy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "2bc49f3d",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "10321770",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "a9ab2007",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5b6ed0d4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model=LinearRegression()\n",
    "model.fit(x_train.reshape(-1,1),y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "47457ada",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred=model.predict(x_test.reshape(-1,1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "e2ab6845",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9574721715261387"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.score(x_test.reshape(-1,1),y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "933aff29",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import mean_squared_log_error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "46f1ea03",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.004418495906730879"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_squared_log_error(y_pred,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "96f2d4ea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([101530.10941132,  53181.04432672, 112166.90372993, 126671.62325531,\n",
       "        44478.21261149,  76388.59556733,  74454.63296394,  72520.67036056])"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "04cba02a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([101303.,  56643., 105583., 121873.,  43526.,  83089.,  66030.,\n",
       "        67939.])"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "03448e57",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1da2d657cd0>]"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.xlabel('YearsExperience')\n",
    "plt.ylabel('Salary')\n",
    "plt.scatter(x_test,y_test)\n",
    "plt.plot(x_test,y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "20c950d7",
   "metadata": {},
   "source": [
    "### So from above visualisation we can clearly say that our model is predicting pretty good\n",
    "\n",
    "From above graph, we can say if a person has a experience of:\n",
    "    2-4 years salary ranges between 40000 to 60000,\n",
    "    4-6 years salary ranges between 60000 to 80000,\n",
    "    6-8 years salary ranges between 80000 to 100000,\n",
    "    8-10 years salary ranges between 100000 to 120000."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e431f00",
   "metadata": {},
   "source": [
    "If you notice the minimum experience starts from 1.2 and ends at 10.6 so to add them we will bin and find the mean to get average salary of bins"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "cb0382f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "ds_salary['years']=pd.cut(ds_salary['YearsExperience'],[1,3,5,7,9,11],right=False,labels=['1-3 years','3-5 years','5-7 years','7-9 years','9-11 years'],)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "3b024c74",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_new_salary=ds_salary[['Salary','years']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "8b8b9757",
   "metadata": {},
   "outputs": [],
   "source": [
    "years_grouping=df_new_salary.groupby(['years'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "578ac24e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1-3 years mean is 41340.0\n",
      "3-5 years mean is 58704.2\n",
      "5-7 years mean is 80683.67\n",
      "7-9 years mean is 105705.5\n",
      "9-11 years mean is 115890.8\n"
     ]
    }
   ],
   "source": [
    "labels=['1-3 years','3-5 years','5-7 years','7-9 years','9-11 years']\n",
    "for items in labels:\n",
    "    years_experience=years_grouping.get_group(items)\n",
    "    mean=round(years_experience.Salary.mean(),2);\n",
    "    msg=items+\" mean is \"+ str(mean);\n",
    "    print(msg)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f99ed36",
   "metadata": {},
   "source": [
    "### so the average salary of a person who has 1-3 years is more likely to be rupees 41340, 3-5 years is rupees 58704.2, 5-7 years is rupees 80683.67, 7-9 years is rupees 105705.4 and 9-11 years is rupees 115890.8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b4049473",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
